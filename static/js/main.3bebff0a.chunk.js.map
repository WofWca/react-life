{"version":3,"sources":["index.js"],"names":["create2DArrayOf","height","width","val","newArr","length","rowI","newRow","fill","Cell","_this","this","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","onMouseOver","props","columnI","onMouseDown","style","backgroundColor","alive","border","React","PureComponent","Grid","onMouseOverCell","mouseDown","_this2","onCellToggle","_this3","borderCollapse","cells","map","row","key","toString","cellVal","concat","Component","Game","_this4","Object","_mnt_q_Git_react_life_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_mnt_q_Git_react_life_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_mnt_q_Git_react_life_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","pause","clearInterval","timer","setState","paused","unpause","setInterval","step","state","frequency","handleSpeedChange","event","newFrequency","target","value","toggleCell","updateCells","currStateCells","nextStateCells","gridHeight","gridDimensions","gridWidth","generationNum","_nextStateCells","pauseUnpauseButton","onClick","type","min","max","onChange","cellsArray","numNeighbors","cellIsAlive","updater","_this5","newCells","_this6","forEach","currCellAlive","cellGetNumNeighbors","document","onmousedown","onmouseup","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.3bebff0a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nfunction create2DArrayOf(height, width, val) {\r\n  let newArr = [];\r\n  newArr.length = height;\r\n  for (let rowI = 0; rowI < height; rowI++) {\r\n    let newRow = []; newRow.length = width;\r\n    newRow.fill(val, 0, newRow.length);\r\n    newArr[rowI] = newRow;\r\n  }\r\n  return newArr;\r\n}\r\n\r\nclass Cell extends React.PureComponent {\r\n  render() {\r\n    return (\r\n      <td className=\"square\"\r\n        onMouseOver={() => this.props.onMouseOver(this.props.rowI, this.props.columnI)}\r\n        onMouseDown={() => this.props.onMouseDown(this.props.rowI, this.props.columnI)}\r\n        style={{\r\n          backgroundColor: (this.props.alive ? \"black\" : \"white\"),\r\n          // TODO define sizes somewhere else?\r\n          width: \"10px\",\r\n          height: \"10px\",\r\n          border: \"solid gray 1px\"\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nclass Grid extends React.Component {\r\n  /* This is just a grid representation component.\r\n  The source of truth is located in `Game` component. */\r\n  render() {\r\n    return (\r\n      <table style={{borderCollapse: \"collapse\"}}>\r\n        <tbody>\r\n          {this.props.cells.map((row, rowI) => (\r\n            <tr className=\"gridRow\" key={rowI.toString()}>\r\n              {row.map((cellVal, columnI) => (\r\n                <Cell\r\n                  rowI={rowI}\r\n                  columnI={columnI}\r\n                  alive={cellVal}\r\n                  key={`${rowI}:${columnI}`}\r\n                  onMouseOver={this.onMouseOverCell}\r\n                  onMouseDown={this.props.onCellToggle}\r\n                />\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n\r\n  onMouseOverCell = (rowI, columnI) => {\r\n    if (mouseDown) {\r\n      this.props.onCellToggle(rowI, columnI);\r\n    }\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  // TODO implement using Redux?\r\n  constructor (props) {\r\n    super(props);\r\n    // Grid generation\r\n    this.gridHeight = \"gridDimensions\" in props ? props.gridDimensions.height : 20;\r\n    this.gridWidth = \"gridDimensions\" in props ? props.gridDimensions.width : 20;\r\n    let cells = create2DArrayOf(this.gridHeight, this.gridWidth, false);\r\n    this.state = {\r\n      // TODO replace with 1D?\r\n      cells: cells, // A 2D array of bool.\r\n      frequency: \"frequency\" in props ? props.frequency : 4,  // In seconds\r\n      paused: true\r\n    };\r\n\r\n    this.generationNum = 0;\r\n    this._nextStateCells = create2DArrayOf(this.gridHeight, this.gridWidth, false);\r\n  }\r\n\r\n  render() {\r\n    let pauseUnpauseButton;\r\n    if (this.state.paused) {\r\n      pauseUnpauseButton = <button onClick={this.unpause}>Unpause</button>;\r\n    } else {\r\n      pauseUnpauseButton = <button onClick={this.pause}>Pause</button>;\r\n    }\r\n    return (\r\n      <div>\r\n        <div className=\"controls\">\r\n          {pauseUnpauseButton}\r\n          <input type=\"range\" min=\"0.5\" max=\"20\"\r\n            value={this.state.frequency}\r\n            onChange={this.handleSpeedChange}\r\n          />\r\n        </div>\r\n        <Grid\r\n          cells={this.state.cells}\r\n          onCellToggle={this.toggleCell}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  pause = () => {\r\n    clearInterval(this.timer);\r\n    this.setState({ paused: true });\r\n  }\r\n\r\n  unpause = () => {\r\n    this.timer = setInterval(() => this.step(), 1 / this.state.frequency * 1000);\r\n    this.setState({ paused: false });\r\n  }\r\n\r\n  handleSpeedChange = (event) => {\r\n    const newFrequency = event.target.value;\r\n    if (!this.state.paused) {\r\n      clearInterval(this.timer);\r\n      this.timer = setInterval(() => this.step(), 1 / newFrequency * 1000);\r\n    }\r\n    this.setState({ frequency: newFrequency });\r\n  }\r\n\r\n  cellIsAlive(cellsArray, rowI, columnI) {\r\n    if (rowI < 0 || rowI >= this.gridHeight ||\r\n      columnI < 0 || columnI >= this.gridWidth) {\r\n      return false;\r\n    }\r\n    if (cellsArray[rowI][columnI] === false) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  cellGetNumNeighbors(cellsArray, rowI, columnI) { \r\n    let numNeighbors = 0;\r\n    if (this.cellIsAlive(cellsArray, rowI - 1, columnI - 1)) numNeighbors++;\r\n    if (this.cellIsAlive(cellsArray, rowI - 1, columnI)) numNeighbors++;\r\n    if (this.cellIsAlive(cellsArray, rowI - 1, columnI + 1)) numNeighbors++;\r\n    if (this.cellIsAlive(cellsArray, rowI, columnI - 1)) numNeighbors++;\r\n    if (this.cellIsAlive(cellsArray, rowI, columnI + 1)) numNeighbors++;\r\n    if (this.cellIsAlive(cellsArray, rowI + 1, columnI - 1)) numNeighbors++;\r\n    if (this.cellIsAlive(cellsArray, rowI + 1, columnI)) numNeighbors++;\r\n    if (this.cellIsAlive(cellsArray, rowI + 1, columnI + 1)) numNeighbors++;\r\n    return numNeighbors;\r\n  }\r\n\r\n  updateCells(updater) {\r\n    /* If an update needs to be done to cells, this function must be called.\r\n    `updater` must be a function like:\r\n    `(currStateCells, nextStateCells) => { ... }`, which defines the way the\r\n    cells must be updated. currStateCells must not be modified.\r\n    `nextStateCells` will be assigned to the current state upon execution. */\r\n    this.setState((state, props) => {\r\n      // Copy the current state.\r\n      const height = state.cells.length, width = state.cells[0].length;\r\n      for (let rowI = 0; rowI < height; rowI++) {\r\n        for (let columnI = 0; columnI < width; columnI++) {\r\n          this._nextStateCells[rowI][columnI] = state.cells[rowI][columnI];\r\n        }\r\n      }\r\n      updater(state.cells, this._nextStateCells);\r\n\r\n      // The array pointed to by `this._nextStateCells` becomes a new state\r\n      // The array pointed to by `state.cells` is new considered to\r\n      // contain waste and is assigned to this._nextStateCells for further\r\n      // rewriting to avoid memory reallocation.\r\n      const newCells = this._nextStateCells;\r\n      this._nextStateCells = state.cells;\r\n      return { cells: newCells };\r\n    });\r\n  }\r\n\r\n  step () {\r\n    /* TODO calculate the next step before the time has passed?\r\n    Recalculate if the user drew something.*/\r\n    // TODO only calcualte cells whose neighbours have changed.\r\n    this.updateCells((currStateCells, nextStateCells) => {\r\n      currStateCells.forEach((row, rowI) => {\r\n        row.forEach((currCellAlive, columnI) => {\r\n          // Now, the actual game logic\r\n          let numNeighbors = this.cellGetNumNeighbors(currStateCells, rowI, columnI);\r\n          if (\r\n            numNeighbors === 3 ||\r\n            (numNeighbors === 2 && currCellAlive)\r\n          ) {\r\n            nextStateCells[rowI][columnI] = true;\r\n          } else {\r\n            nextStateCells[rowI][columnI] = false;\r\n          }\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  toggleCell = (rowI, columnI) => {\r\n    this.updateCells((currStateCells, nextStateCells) => {\r\n      nextStateCells[rowI][columnI] = !currStateCells[rowI][columnI];\r\n    });\r\n  }\r\n}\r\n\r\nvar mouseDown = false;\r\ndocument.onmousedown = function() {\r\n  mouseDown = true;\r\n};\r\ndocument.onmouseup = function () {\r\n  mouseDown = false;\r\n};\r\n\r\nReactDOM.render(\r\n  <Game gridDimensions={{ height: 30, width: 30 }} />,\r\n  document.getElementById(\"root\")\r\n);"],"sourceRoot":""}