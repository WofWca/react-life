{"version":3,"sources":["index.js"],"names":["Cell","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","style","backgroundColor","this","props","alive","width","height","border","React","Component","Grid","borderCollapse","cells","map","row","cell_val","Game","_this","Object","_mnt_q_Git_react_test_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_mnt_q_Git_react_test_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_mnt_q_Git_react_test_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","generation_num","frequency","grid_height","length","grid_width","next_gen_cells","row_i","new_row","fill","column_i","num_neighbors","cell_is_alive","_this2","slice","forEach","curr_cell_alive","cell_get_num_neighbors","old_cells_gen_arr","setState","_this3","timer","setInterval","step","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c975ca58.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nclass Cell extends React.Component {\r\n  render() {\r\n    return (\r\n      <td className=\"square\"\r\n        style={{\r\n          backgroundColor: (this.props.alive ? \"black\" : \"white\"),\r\n          // TODO define sizes somewhere else?\r\n          width: \"10px\",\r\n          height: \"10px\",\r\n          border: \"solid gray 1px\"\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nclass Grid extends React.Component {\r\n  /* This is just a grid representation component.\r\n  The source of truth is located in `Game` component. */\r\n  render() {\r\n    return (\r\n      <table style={{borderCollapse: \"collapse\"}}>\r\n        <tbody>\r\n          {this.props.cells.map((row) => (\r\n            <tr className=\"grid_row\">\r\n              {row.map((cell_val) => <Cell alive={cell_val} />)}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor (props) {\r\n    super(props);\r\n    this.state = {\r\n      cells: props.cells, // A 2D array of bool.\r\n    };\r\n    this.generation_num = 0;\r\n    this.frequency = \"frequency\" in props ? props.frequency : 2;  // In seconds\r\n    this.grid_height = props.cells.length;\r\n    this.grid_width = props.cells[0].length;\r\n    this.next_gen_cells = [];\r\n    this.next_gen_cells.length = this.grid_height;\r\n    for (let row_i = 0; row_i < this.next_gen_cells.length; row_i++) {\r\n      let new_row = []; new_row.length = this.grid_width;\r\n      new_row.fill(false, 0, new_row.length);\r\n      this.next_gen_cells[row_i] = new_row;\r\n    }\r\n  }\r\n\r\n  cell_is_alive(row_i, column_i) {\r\n    if (row_i < 0 || row_i >= this.grid_height ||\r\n      column_i < 0 || column_i >= this.grid_width) {\r\n      return false;\r\n    }\r\n    if (this.state.cells[row_i][column_i] === false) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  cell_get_num_neighbors (row_i, column_i) { \r\n    let num_neighbors = 0;\r\n    if (this.cell_is_alive(row_i - 1, column_i - 1)) num_neighbors++;\r\n    if (this.cell_is_alive(row_i - 1, column_i)) num_neighbors++;\r\n    if (this.cell_is_alive(row_i - 1, column_i + 1)) num_neighbors++;\r\n    if (this.cell_is_alive(row_i, column_i - 1)) num_neighbors++;\r\n    if (this.cell_is_alive(row_i, column_i + 1)) num_neighbors++;\r\n    if (this.cell_is_alive(row_i + 1, column_i - 1)) num_neighbors++;\r\n    if (this.cell_is_alive(row_i + 1, column_i)) num_neighbors++;\r\n    if (this.cell_is_alive(row_i + 1, column_i + 1)) num_neighbors++;\r\n    return num_neighbors;\r\n  }\r\n\r\n  step () {\r\n    // TODO calculate the next step before the time has passed\r\n    // TODO only calcualte cells whose neighbours have changed.\r\n\r\n    // Copy the from the old state.\r\n    // You can't just `this.next_gen_cells = this.state.cells.slice()`, as this is\r\n    // a shallow copy.\r\n    for (let row_i = 0; row_i < this.next_gen_cells.length; row_i++) {\r\n      this.next_gen_cells[row_i] = this.state.cells[row_i].slice();\r\n    }\r\n\r\n    // TODO these forEach(..., this) are ugly.\r\n    this.state.cells.forEach((row, row_i) => {\r\n      row.forEach((curr_cell_alive, column_i) => {\r\n        // Now, the actual game logic\r\n        let num_neighbors = this.cell_get_num_neighbors(row_i, column_i);\r\n        if (\r\n          num_neighbors === 3 ||\r\n          (num_neighbors === 2 && curr_cell_alive)\r\n        ) {\r\n          this.next_gen_cells[row_i][column_i] = true;\r\n        } else {\r\n          this.next_gen_cells[row_i][column_i] = false;\r\n        }\r\n      }, this);\r\n    }, this);\r\n    // Exchange the current state and the buffer for the next one.\r\n    let old_cells_gen_arr = this.state.cells;\r\n    this.setState({ cells: this.next_gen_cells });\r\n    this.next_gen_cells = old_cells_gen_arr;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Grid cells={this.state.cells}/>\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.timer = setInterval(() => this.step(), 1 / this.frequency * 1000);\r\n  }\r\n}\r\n\r\nlet cells = [\r\n  [false, true, false, false, false, true, false],\r\n  [false, false, true, false, false, true, false],\r\n  [true, true, true, false, false, true, false],\r\n  [false, false, false, false, false, false, false],\r\n  [false, false, false, false, false, false, false],\r\n  [false, false, false, false, false, false, false],\r\n];\r\nReactDOM.render(\r\n  <Game cells={cells}/>,\r\n  document.getElementById(\"root\")\r\n);"],"sourceRoot":""}